package by.epam.lesson6.task1.book;

import by.epam.lesson6.task1.mail.FetchEmail;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BaseOfBook {
    List<Book> books = new ArrayList<>();
    File fileOfBooks = new File("./data/Books.txt");
    //Блок инициализации, в котором все книги из текстового файла выкачиваются в список.
    {
        if(fileOfBooks.exists() && fileOfBooks.length() != 0){
            try (FileReader readerBooks = new FileReader(fileOfBooks)){
                Scanner scanner = new Scanner(readerBooks);
                while (scanner.hasNext()){
                    String[] informationAboutBook = scanner.nextLine().split("\t");

                    books.add(new Book(informationAboutBook[0], informationAboutBook[1], Genre.valueOf(informationAboutBook[2]),
                            Type.valueOf(informationAboutBook[3]), informationAboutBook[4], informationAboutBook[5]));

                }
            } catch (IOException e) {e.printStackTrace();}
        }
    }
    //Запускает просмотр всех книг
    public ForListOfBooks showBooks(int currentPage, String text){
        return showPageOfBooks(books, text, currentPage);
    }

    public ForListOfBooks showBooks(List<Book> arrayListOfBook, int currentPage, String text){
        return showPageOfBooks(arrayListOfBook, text, currentPage);
    }

    //Работает по аналогии ctrl+f - ищет любое упоминание данной строки в book.toString, и отправляет его на вывод по страницам
    public List find(String combination){
        List<Book> findBook = new ArrayList<>();
        Pattern pattern = Pattern.compile(combination);
        for (Book b:books) {
            Matcher matcher = pattern.matcher(b.toString());
            if(matcher.find()){
                findBook.add(b);
            }
        }
        return findBook;
    }

    //Выдает выбранную книгу
    public Book selectCheckedBook(int position, List<Book> arrayListOfBook){
        Book[] massOfBook = toMass(arrayListOfBook);
        return massOfBook[position];
    }

    public void removeBook(Book book){
        books.remove(book);
    }

    //Добавление книги
    public void addNewBook(String name, String author, Genre genre, Type type, String description, String storage){
        Book book = new Book(name, author, genre, type, description, storage);
        addNewBook(book);
    }

    public void addNewBook(Book book){
        books.add(book);
    }

    public List listOfBookFromEmail(){
        FetchEmail email = new FetchEmail();
        List<Book> booksFromEmailAll = email.fetchEmail();
        List<Book> booksFromEmail = new ArrayList<>();
        for(Book b:booksFromEmailAll){
            if(!books.contains(b)) booksFromEmail.add(b);
        }
        return booksFromEmail;
    }

    public void saveInFile(){
        try (FileWriter writerBookToFile = new FileWriter(fileOfBooks, false)){
            for (Book b:books) {
                writerBookToFile.write(b.toString() + "\n");
            }
        }catch (IOException e){e.printStackTrace();}
    }
    //Вывести одну страницу со списком книг с заголовками и возможными действиями
    private ForListOfBooks showPageOfBooks(List<Book> arrayListOfBook, String text, int currentPage){
        String result = "";
        ForListOfBooks listOfBooks;
        if (!arrayListOfBook.isEmpty()) {
            Book[] massOfBook = toMass(arrayListOfBook);
            double pagesDouble = new BigDecimal(massOfBook.length / 10.0).setScale(0, RoundingMode.UP).doubleValue();
            int pages = (int) pagesDouble;

            result += shower(currentPage, massOfBook, pages) + "\n";

            if (currentPage < pages) {
                result += "If you want go to next page, press 'n'. ";
            }
            if (currentPage != 1) {
                result += "If you want go to previous page - press 'p'. ";
            }
            result += "If you want go to necessary page - enter 'page' and necessary page. ";
            result += text + " - enter № of book on page. ";
            result += "To exit press 'e' or '0'";

            listOfBooks = new ForListOfBooks(result, pages, arrayListOfBook);
        }
        else {
            result += "The can't find any book";
            listOfBooks = new ForListOfBooks(result, 0, arrayListOfBook);
        }
        return listOfBooks;
    }

//Шаблон текста для просмотра одной страницы
    private String shower(int page, Book[] massOfBook, int pages){
        int pageCoefficient = (page - 1) * 10;
        String result = "№\tName\tAuthor\tGenre\tType\n";
        for(int i = 0; i < 10 && pageCoefficient + i < massOfBook.length; i++){
            try {
                result += (i + 1) + "\t" + showShortedDescription(massOfBook[i + pageCoefficient]) + '\n';
            } catch (NullPointerException e){}
        }
        result += "Page " + page + " of " + pages;
        return result;
    }

    //Вывести краткое описание книги
    private String showShortedDescription(Book book){
        return book.getName() + '\t' + book.getAuthor() + '\t' + book.getGenre() + "\t" + book.getType();
    }

    private Book[] toMass(List<Book> listOfBook){
        Book[] massOfBooks = new Book[listOfBook.size()];
        int i = 0;
        for(Book b:listOfBook){
            massOfBooks[i++] = b;
        }
        return massOfBooks;
    }

}
