package by.epam.lesson6.task3.xml;

import by.epam.lesson6.task3.cases.Case;
import by.epam.lesson6.task3.cases.Privileges;
import by.epam.lesson6.task3.user.AbstractUsers;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.util.List;
import java.util.Set;


public class XmlWriter {
    public void xmlWriterUsers(List<AbstractUsers> users){
        File userFile = new File("./data/User.xml");
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.newDocument();
            Element rootElement =  document.createElement("users");
            document.appendChild(rootElement);
            for (AbstractUsers a:users) {
                rootElement.appendChild(getChildNodeUser(document, a.getName(), a.getPassword(), a.isAdmin()));
            }
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource source = new DOMSource(document);
            StreamResult file = new StreamResult(userFile);
            transformer.transform(source, file);
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (TransformerConfigurationException e){
            e.printStackTrace();
        } catch (TransformerException e){
            e.printStackTrace();
        }

    }

    private Node getChildNodeUser (Document document, String name, String password, boolean isAdmin){
        Element user = document.createElement("user");
        user.appendChild(getNode(document, "name", name));
        user.appendChild(getNode(document, "password", password));
        user.appendChild(getNode(document, "isAdmin", String.valueOf(isAdmin)));
        return user;
    }

    public void xmlWriterCase(List<Case> cases){
        File fileToCases = new File("./data/Case.xml");
        try {
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = builderFactory.newDocumentBuilder();
            Document document = builder.newDocument();
            Element rootElement = document.createElement("Cases");
            document.appendChild(rootElement);
            for(Case c:cases){
                rootElement.appendChild(getChildNodeCase(document, c.getName(), c.getFaculty(), c.getLocation(), c.isHostel(), c.isBudget(), c.getAverageGrade(),
                        c.getComment(), c.getPrivileges()));
            }
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            DOMSource source = new DOMSource(document);
            StreamResult result = new StreamResult(fileToCases);

            transformer.transform(source, result);
        } catch (Exception e){e.printStackTrace();}
    }

    private Node getChildNodeCase (Document document, String name, String faculty, String location, boolean isHostel, boolean isBudge,
                                   double averageGrade, String comment, Set<Privileges> privileges){
        Element cases = document.createElement("case");
        cases.appendChild(getNode(document, "name", name));
        cases.appendChild(getNode(document, "faculty", faculty));
        cases.appendChild(getNode(document, "location", location));
        cases.appendChild(getNode(document, "isHostel", String.valueOf(isHostel)));
        cases.appendChild(getNode(document, "isBudge", String.valueOf(isBudge)));
        cases.appendChild(getNode(document, "averageGrade", String.valueOf(averageGrade)));
        cases.appendChild(getNode(document, "comment", comment));
        Element privilegesElement = document.createElement("privileges");
        for(Privileges p:privileges){
            privilegesElement.appendChild(getNode(document, "privilege",p.name()));
        }
        cases.appendChild(privilegesElement);
        return cases;
    }

    private Node getNode(Document document, String name, String value){
        Element node = document.createElement(name);
        node.appendChild(document.createTextNode(value));
        return node;
    }

    private Node getNode(Document document, String name){
        Element node = document.createElement(name);
        return node;
    }
}
