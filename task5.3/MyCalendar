import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

public class MyCalendar {
    private List daysOff = new ArrayList();
    private class PlayDay{
        Calendar day;
        TypeOfDay type;
        String name; // название праздника. Если просто выходной день, то по умолчанию будет "day off", если праздник, то по умолчанию "unknown"

        //Класс, объекты которого обозначают выходные и праздничные дни
        private PlayDay(Calendar day, TypeOfDay type, String name) {
            this.day = day;
            this.type = type;
            this.name = name;
        }

        private PlayDay(Calendar day, TypeOfDay type) {
            this.day = day;
            this.type = type;
            if(type.equals(TypeOfDay.DAY_OFF)){
                name = "day off";
            }
            else {
                name = "unknown";
            }
        }

        private PlayDay(Calendar day) {
            this.day = day;
        }
        DateFormat df = new SimpleDateFormat("DD/MM/YYYY");

        public void setDay(Calendar day) {
            this.day = day;
        }

        public TypeOfDay getType() {
            return type;
        }

        public void setType(TypeOfDay type) {
            this.type = type;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Calendar getDay() {
            return day;
        }


        @Override
        public String toString() {
            return  type + ": ";// + df.format(day) + ", name is" + name;
        }


        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            PlayDay playDay = (PlayDay) o;
            return Objects.equals(day, playDay.day) &&
                    type == playDay.type &&
                    Objects.equals(name, playDay.name);
        }

        @Override
        public int hashCode() {
            return Objects.hash(day, type, name);
        }
    }

    public void addDayOff(Calendar c, TypeOfDay type, String name){
        PlayDay playDay = new PlayDay(c, type, name);
        daysOff.add(playDay);
        daysOff.sort(new Comparator() {
            @Override
            public int compare(Object o1, Object o2) {
                PlayDay playDay1 = (PlayDay)o1;
                PlayDay playDay2 = (PlayDay)o2;
                return playDay1.getDay().compareTo(playDay2.getDay());
            }
        });
    }

    public void addDayOff(Calendar c, TypeOfDay type){
        addDayOff(c, type, "unknown");
    }

    public String checkDay(Calendar c){
        if(findDate(c)){
            return "Today you can rest";
        }
        else {
            return "Today you mast work!";
        }
    }

    private boolean findDate(Calendar c){
        Object dayOffMass[] = daysOff.toArray();
        while (dayOffMass.length > 1){
            PlayDay day = (PlayDay) dayOffMass[dayOffMass.length/2];
            System.out.println(day.getDay().toString());
            System.out.println(c.toString());
            int result = day.getDay().compareTo(c);
            System.out.println(result);
            if(result == 0) return true;
            else if(result == -1){
                dayOffMass = getNewMass(dayOffMass, dayOffMass.length/2, dayOffMass.length - 1);
            }
            else {
                dayOffMass = getNewMass(dayOffMass, 0, dayOffMass.length/2 - 1);
            }
        }
        if(dayOffMass.length > 0) {
            PlayDay d = (PlayDay) dayOffMass[0];
            return d.getDay().equals(c);
        }
        return false;
    }

    private Object[] getNewMass(Object[] oldMass, int startPos, int finishPos){
        Object[] newMass = new Object[finishPos - startPos + 1];
        int j = 0;
        for(int i = startPos; i <= finishPos; i++, j++){
            newMass[j] = oldMass[i];
        }
        return newMass;
    }
}
