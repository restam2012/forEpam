package by.epam.lesson5.task4;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
//Конструкторы
public class Den {
    private List<Treasure> treasures = new ArrayList<>();

    public Den(List<Treasure> treasures) {
        this.treasures = treasures;
    }

    public Den(Treasure treasure) {
        treasures.add(treasure);
    }

    public Den() {

    }

    //Добавить сокровище
    public void addTreasures(Treasure... treasure){
        for (Treasure p: treasure) {
            treasures.add(p);
        }
    }
    //Удалить сокровище
    public void deleteTreasures(String name){
        for (Treasure p: treasures) {
            if(p.getName().equals(name)){
                treasures.remove(p);
            }
        }
    }
    //Показать все сокровища
    public String showTreasure(){
        String result = new String();
        sort();
        for (Treasure p: treasures) {
            result += p + "\n";
        }
        return result;
    }
    //Показать самое дорогое сокровище, из сортированного списка выбрать самую первую запись(самое дорогое сокровище)
    public String showMaxPrice(){
        sort();
        return treasures.stream().findFirst().get().toString();
    }
    //Сортировка от самого дорого к самому дешевому
    private void sort(){
        Collections.sort(treasures, new Comparator<Treasure>() {
            @Override
            public int compare(Treasure o1, Treasure o2) {
                if(o1.getPrice() < o2.getPrice()) return 1;
                else if (o1.getPrice() > o2.getPrice()) return -1;
                else return 0;
            }
        });
    }
    //Показать сокровища, сумма равной указанной сумме
    public String showTreasureByPrice(double price){
        String result = new String();
        sort();
        for (Treasure p: treasures) {
            if(p.getPrice() == price) result += p + "\n";
        }
        return result;
    }
    //Сохранить список сокровищ в файл
    public String saveTreasure(){
        try (FileWriter writer = new FileWriter("by.epam.lesson5.task4.Den.txt")){
            for (Treasure p: treasures) {
                writer.write(p.toString() + "\n");
            }
        } catch (IOException e){e.printStackTrace();}
        return "by.epam.lesson5.task4.Treasure save successful";
    }
    //Взять список из файла
    public String getFromFile(){
        int count = 0;
        try (FileReader reader = new FileReader("by.epam.lesson5.task4.Den.txt")){
            Scanner scanner = new Scanner(reader);
            while (scanner.hasNext()){
                treasures.add(treasureHelper(scanner.nextLine()));
                count++;
            }
        } catch (IOException e){e.printStackTrace();}
        return count + " treasure added";
    }

    //Разбитие записи на нужные графы, которые потом упаковываются в класс by.epam.lesson5.task3.by.epam.lesson5.task3.Treasure
    private Treasure treasureHelper(String line) throws IOException{
        if(line.isEmpty()) throw new IOException("Enter empty line");
        String[] mass = line.split("\t");
        if(mass.length != 3) throw new IOException("Length is not correct");

        return new Treasure(mass[0], Double.valueOf(mass[1]), Double.valueOf(mass[2]));
    }
}
